{"ast":null,"code":"import { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","takeLatest","throttle","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","result","type","id","err","console","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"sources":["/home/edu01/vscode_react_practice/inflearn/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,oBAAoB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,QACX,kBAAkB;AACzB,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEpE,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOV,KAAK,CAACW,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;AAClC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMf,IAAI,CAACU,UAAU,EAAEI,MAAM,CAACH,IAAI,CAAC;IAClD,MAAMd,GAAG,CAAC;MACRmB,IAAI,EAAET,gBAAgB;MACtBI,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;IACF,MAAMd,GAAG,CAAC;MACRmB,IAAI,EAAER,cAAc;MACpBG,IAAI,EAAEI,MAAM,CAACJ,IAAI,CAACM;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrB,GAAG,CAAC;MACRmB,IAAI,EAAEX,gBAAgB;MACtBe,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACV;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASW,aAAa,CAACX,IAAI,EAAE;EAC3B,OAAOV,KAAK,CAACW,IAAI,CAAE,SAAQD,IAAI,CAACY,MAAO,UAAS,EAAEZ,IAAI,CAAC,CAAC,CAAC;AAC3D;;AAEA,UAAUa,UAAU,CAACV,MAAM,EAAE;EAC3B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMf,IAAI,CAACsB,aAAa,EAAER,MAAM,CAACH,IAAI,CAAC;IACrD,MAAMd,GAAG,CAAC;MACRmB,IAAI,EAAEZ,mBAAmB;MACzBO,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrB,GAAG,CAAC;MACRmB,IAAI,EAAEd,mBAAmB;MACzBkB,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACV;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUc,YAAY,GAAG;EACvB,MAAM3B,UAAU,CAACQ,gBAAgB,EAAEO,OAAO,CAAC;AAC7C;AAEA,UAAUa,eAAe,GAAG;EAC1B,MAAM5B,UAAU,CAACK,mBAAmB,EAAEqB,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUG,QAAQ,GAAG;EAClC,MAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC6B,YAAY,CAAC,EAAE7B,IAAI,CAAC8B,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}