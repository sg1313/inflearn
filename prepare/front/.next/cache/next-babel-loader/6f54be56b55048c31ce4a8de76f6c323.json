{"ast":null,"code":"var _jsxFileName = \"/home/edu01/vscode_react_practice/inflearn/prepare/front/components/PostCardContent.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar TextArea = Input.TextArea;\nvar PostCardContent = function PostCardContent(_ref) {\n  _s();\n  var postData = _ref.postData,\n    editMode = _ref.editMode,\n    onChangePost = _ref.onChangePost,\n    onCancelUpdate = _ref.onCancelUpdate;\n  var _useSelector = useSelector(function (state) {\n      return state.post;\n    }),\n    updatePostLoading = _useSelector.updatePostLoading,\n    updatePostDone = _useSelector.updatePostDone;\n  var _useState = useState(postData),\n    editText = _useState[0],\n    setEditText = _useState[1];\n  useEffect(function () {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  });\n  return (\n    /*#__PURE__*/\n    // 첫 번째 게시글 #해시태그 #해시태그\n    _jsxDEV(\"div\", {\n      children: editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextArea, {\n          value: editText,\n          onChange: onChangeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            loading: updatePostLoading,\n            onClick: onChangePost(editText),\n            children: \"\\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"danger\",\n            onClick: onCancelUpdate,\n            children: \"\\uCDE8\\uC18C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true) : postData.split(/(#[^\\s#]+)/g).map(function (v, i) {\n        if (v.match(/(#[^\\s#]+)/)) {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/hashtag/\".concat(v.slice(1)),\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, _this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, _this);\n        }\n        return v;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, _this)\n  );\n};\n_s(PostCardContent, \"TtzJjb8m3UZlCxRREZJyhMFauZk=\", false, function () {\n  return [useSelector];\n});\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onChangePost: PropTypes.func.isRequired,\n  onCancelUpdate: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;\nvar _c;\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Link","Button","Input","PropTypes","useSelector","TextArea","PostCardContent","postData","editMode","onChangePost","onCancelUpdate","state","post","updatePostLoading","updatePostDone","editText","setEditText","onChangeText","e","target","value","split","map","v","i","match","slice","propTypes","string","isRequired","bool","func","defaultProps"],"sources":["/home/edu01/vscode_react_practice/inflearn/prepare/front/components/PostCardContent.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Button, Input } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\n\nconst { TextArea } = Input;\nconst PostCardContent = ({\n  postData,\n  editMode,\n  onChangePost,\n  onCancelUpdate,\n}) => {\n  const { updatePostLoading, updatePostDone } = useSelector(\n    (state) => state.post\n  );\n  const [editText, setEditText] = useState(postData);\n\n  useEffect(() => {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n\n  const onChangeText = useCallback((e) => {\n    setEditText(e.target.value);\n  });\n\n  return (\n    // 첫 번째 게시글 #해시태그 #해시태그\n    <div>\n      {editMode ? (\n        <>\n          <TextArea value={editText} onChange={onChangeText} />\n          <Button.Group>\n            <Button\n              loading={updatePostLoading}\n              onClick={onChangePost(editText)}\n            >\n              수정\n            </Button>\n            <Button type=\"danger\" onClick={onCancelUpdate}>\n              취소\n            </Button>\n          </Button.Group>\n        </>\n      ) : (\n        postData.split(/(#[^\\s#]+)/g).map((v, i) => {\n          if (v.match(/(#[^\\s#]+)/)) {\n            return (\n              <Link href={`/hashtag/${v.slice(1)}`} prefetch={false} key={i}>\n                <a>{v}</a>\n              </Link>\n            );\n          }\n          return v;\n        })\n      )}\n    </div>\n  );\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onChangePost: PropTypes.func.isRequired,\n  onCancelUpdate: PropTypes.func.isRequired,\n};\nPostCardContent.defaultProps = {\n  editMode: false,\n};\n\nexport default PostCardContent;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC/D,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,MAAM,EAAEC,KAAK,QAAQ,MAAM;AACpC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,WAAW,QAAQ,aAAa;AAAC;AAAA;AAE1C,IAAQC,QAAQ,GAAKH,KAAK,CAAlBG,QAAQ;AAChB,IAAMC,eAAe,GAAG,SAAlBA,eAAe,OAKf;EAAA;EAAA,IAJJC,QAAQ,QAARA,QAAQ;IACRC,QAAQ,QAARA,QAAQ;IACRC,YAAY,QAAZA,YAAY;IACZC,cAAc,QAAdA,cAAc;EAEd,mBAA8CN,WAAW,CACvD,UAACO,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EACtB;IAFOC,iBAAiB,gBAAjBA,iBAAiB;IAAEC,cAAc,gBAAdA,cAAc;EAGzC,gBAAgCjB,QAAQ,CAACU,QAAQ,CAAC;IAA3CQ,QAAQ;IAAEC,WAAW;EAE5BjB,SAAS,CAAC,YAAM;IACd,IAAIe,cAAc,EAAE;MAClBJ,cAAc,EAAE;IAClB;EACF,CAAC,EAAE,CAACI,cAAc,CAAC,CAAC;EAEpB,IAAMG,YAAY,GAAGnB,WAAW,CAAC,UAACoB,CAAC,EAAK;IACtCF,WAAW,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC,CAAC;EAEF;IAAA;IACE;IACA;MAAA,UACGZ,QAAQ,gBACP;QAAA,wBACE,QAAC,QAAQ;UAAC,KAAK,EAAEO,QAAS;UAAC,QAAQ,EAAEE;QAAa;UAAA;UAAA;UAAA;QAAA,SAAG,eACrD,QAAC,MAAM,CAAC,KAAK;UAAA,wBACX,QAAC,MAAM;YACL,OAAO,EAAEJ,iBAAkB;YAC3B,OAAO,EAAEJ,YAAY,CAACM,QAAQ,CAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,SAGzB,eACT,QAAC,MAAM;YAAC,IAAI,EAAC,QAAQ;YAAC,OAAO,EAAEL,cAAe;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,SAErC;QAAA;UAAA;UAAA;UAAA;QAAA,SACI;MAAA,gBACd,GAEHH,QAAQ,CAACc,KAAK,CAAC,aAAa,CAAC,CAACC,GAAG,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;QAC1C,IAAID,CAAC,CAACE,KAAK,CAAC,YAAY,CAAC,EAAE;UACzB,oBACE,QAAC,IAAI;YAAC,IAAI,qBAAcF,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAAG;YAAC,QAAQ,EAAE,KAAM;YAAA,uBACpD;cAAA,UAAIH;YAAC;cAAA;cAAA;cAAA;YAAA;UAAK,GADgDC,CAAC;YAAA;YAAA;YAAA;UAAA,SAEtD;QAEX;QACA,OAAOD,CAAC;MACV,CAAC;IACF;MAAA;MAAA;MAAA;IAAA;EACG;AAEV,CAAC;AAAC,GArDIjB,eAAe;EAAA,QAM2BF,WAAW;AAAA;AAAA,KANrDE,eAAe;AAuDrBA,eAAe,CAACqB,SAAS,GAAG;EAC1BpB,QAAQ,EAAEJ,SAAS,CAACyB,MAAM,CAACC,UAAU;EACrCrB,QAAQ,EAAEL,SAAS,CAAC2B,IAAI;EACxBrB,YAAY,EAAEN,SAAS,CAAC4B,IAAI,CAACF,UAAU;EACvCnB,cAAc,EAAEP,SAAS,CAAC4B,IAAI,CAACF;AACjC,CAAC;AACDvB,eAAe,CAAC0B,YAAY,GAAG;EAC7BxB,QAAQ,EAAE;AACZ,CAAC;AAED,eAAeF,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module"}